package com.personal.project.service.impl;

import com.personal.project.entity.Account;
import com.personal.project.entity.Envelope;
import com.personal.project.exception.ExceptionController;
import com.personal.project.repository.EnvelopeRepository;
import com.personal.project.service.AccountService;
import com.personal.project.service.DTO.EnvelopeDTO;
import com.personal.project.service.DTO.EnvelopeTransactionDTO;
import com.personal.project.service.DTO.EnvelopeWithTransactionsDTO;
import com.personal.project.service.EnvelopeService;
import com.personal.project.service.TransactionService;
import com.personal.project.service.mapper.EnvelopeMapper;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;

@Slf4j
@Service
@RequiredArgsConstructor
public class EnvelopeServiceImpl implements EnvelopeService {
    private final EnvelopeRepository envelopeRepository;
    private final EnvelopeMapper envelopeMapper;
    private final AccountService accountService;
    private final TransactionService<EnvelopeTransactionDTO> transactionService;
    @Override
    public EnvelopeDTO createNewEnvelope(String token, EnvelopeDTO envelopeDTO) {
        Account account = accountService.getAccountEntityFromToken(token);

        Envelope envelope = Envelope.builder() //ID: autogenerated, Date: now()
                .name(envelopeDTO.getName())
                .description(envelopeDTO.getDescription())
                .budgetAmount(envelopeDTO.getBudgetAmount())
                .currentBalance(envelopeDTO.getCurrentBalance() == null ? BigDecimal.ZERO : envelopeDTO.getCurrentBalance()) //empty envelope upon creation, unless told otherwise
                .account(account)
                .isActive(true)
                .build();

        return envelopeMapper.envelopeToEnvelopeDTO(envelopeRepository.save(envelope));
    }

    @Override
    public List<EnvelopeDTO> getAllEnvelopesByToken(String token) {
        return envelopeMapper.envelopeListToEnvelopeDTOList(
                envelopeRepository.getEnvelopesByAccountID(accountService.getAccountEntityFromToken(token).getID())
        );
    }

    @Override
    public EnvelopeDTO getEnvelopeByID(String token, Long envelopeID) {
        Envelope envelope = envelopeRepository.findById(envelopeID).orElseThrow(() -> ExceptionController.envelopeNotFound(envelopeID));
        checkOwnership(token, envelope);
        return envelopeMapper.envelopeToEnvelopeDTO(envelope);
    }

    @Override
    public EnvelopeDTO updateEnvelopeByID(String token, Long envelopeID, EnvelopeDTO envelopeDTO) {
        Envelope envelope = envelopeRepository.findById(envelopeID).orElseThrow(() -> ExceptionController.envelopeNotFound(envelopeID));

        checkOwnership(token, envelope);

        envelopeMapper.updateEnvelope(envelopeDTO, envelope);
        return envelopeMapper.envelopeToEnvelopeDTO(
                envelopeRepository.save(envelope)
        );
    }

    @Override
    public void deleteEnvelopeByID(String token, Long envelopeID) {
        Envelope envelope = envelopeRepository.findById(envelopeID).orElseThrow(() -> ExceptionController.envelopeNotFound(envelopeID));
        checkOwnership(token, envelope);
        envelopeRepository.deleteById(envelopeID);
    }

    @Override
    public List<EnvelopeDTO> getEnvelopesWithNegativeBalance(String token) {
        List<EnvelopeDTO> list = getAllEnvelopesByToken(token);
        return list.stream().filter(e -> e.getCurrentBalance().compareTo(BigDecimal.ZERO) < 0).toList();
    }

    @Override
    public List<EnvelopeDTO> getEnvelopesBelowPercentBalance(String token, Long percentage) {
        if(percentage < 0 || percentage > 100){
            throw ExceptionController.badRequest("Percentage must be between 0 and 100", "ILLEGAL_ARGUMENT");
        }
        List<EnvelopeDTO> list = getAllEnvelopesByToken(token);
        return list.stream().filter(e -> e.getCurrentBalance().compareTo(e.getBudgetAmount().multiply(BigDecimal.valueOf((float)percentage/100))) < 0).toList();
    }

    @Override
    public EnvelopeWithTransactionsDTO getEnvelopeWithTransactions(String token, Long envelopeID) {
        EnvelopeDTO envelopeDTO = getEnvelopeByID(token, envelopeID);
        List<EnvelopeTransactionDTO> envelopeTransactions = transactionService.getAllEnvelopeTransactions(token).stream()
                .filter(e -> e.getEnvelopeID().equals(envelopeID)).toList();
        return new EnvelopeWithTransactionsDTO(envelopeDTO, envelopeTransactions);
    }

    @Override
    public List<EnvelopeWithTransactionsDTO> getFullEnvelopesBetweenMonths(String token, LocalDate startDate, LocalDate endDate) {
        List<EnvelopeWithTransactionsDTO> result = new ArrayList<>();
        List<EnvelopeDTO> envelopes = getAllEnvelopesByToken(token);
        for(EnvelopeDTO envelope : envelopes){
            List<EnvelopeTransactionDTO> envelopeTransactions = transactionService.getEnvelopeTransactionsBetweenMonths(token, startDate, endDate).stream()
                    .filter(e -> e.getEnvelopeID().equals(envelope.getID())).toList();
            result.add(new EnvelopeWithTransactionsDTO(envelope, envelopeTransactions));
        }
        return result;
    }

    @Override
    public List<EnvelopeWithTransactionsDTO> getTopNEnvelopesBySpending(String token, int n, LocalDate startDate, LocalDate endDate) {
        List<EnvelopeWithTransactionsDTO> list = getFullEnvelopesBetweenMonths(token, startDate, endDate);
        for (EnvelopeWithTransactionsDTO envelopeWithTransactionsDTO : list) {
            envelopeWithTransactionsDTO.setTransactions(envelopeWithTransactionsDTO.getTransactions().stream().filter(t -> t.getAmount().compareTo(BigDecimal.ZERO) < 0).toList());
        }
        return list.stream().sorted(Comparator.comparing(e -> e.getTransactions().stream().mapToInt(t -> t.getAmount().intValue()).sum())).limit(n).toList();
    }

    private void checkOwnership(String token, Envelope envelope) {
        Account account = accountService.getAccountEntityFromToken(token);
        if(!envelope.getAccount().getID().equals(account.getID())){
            throw ExceptionController.forbidden();
        }
    }
}
