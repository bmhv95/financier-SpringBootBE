package com.personal.project.service.impl;

import com.personal.project.entity.Account;
import com.personal.project.entity.Envelope;
import com.personal.project.repository.EnvelopeRepository;
import com.personal.project.service.AccountService;
import com.personal.project.service.DTO.EnvelopeDTO;
import com.personal.project.service.EnvelopeService;
import com.personal.project.service.mapper.EnvelopeMapper;
import com.personal.project.util.JwtUtils;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.util.List;

@Slf4j
@Service
@RequiredArgsConstructor
public class EnvelopeServiceImpl implements EnvelopeService {
    private final EnvelopeRepository envelopeRepository;
    private final EnvelopeMapper envelopeMapper;
    private final JwtUtils jwtUtils;
    private final AccountService accountService;
    @Override
    public EnvelopeDTO createNewEnvelope(String token, EnvelopeDTO envelopeDTO) {
        checkDTO(envelopeDTO);

        Account account = accountService.getAccountEntityFromToken(token);

        Envelope envelope = Envelope.builder() //ID: autogenerated, Date: now()
                .envelopeName(envelopeDTO.getEnvelopeName())
                .envelopeBudgetAmount(envelopeDTO.getEnvelopeBudgetAmount())
                .envelopeCurrentBalance(envelopeDTO.getEnvelopeBudgetAmount()) //full envelope upon creation
                .account(account)
                .build();

        return envelopeMapper.envelopeToEnvelopeDTO(envelopeRepository.save(envelope));
    }

    @Override
    public List<EnvelopeDTO> getAllEnvelopesByToken(String token) {
        return envelopeMapper.envelopeListToEnvelopeDTOList(
                envelopeRepository.getEnvelopesByAccountID(accountService.getAccountEntityFromToken(token).getAccountID())
        );
    }

    @Override
    public EnvelopeDTO getEnvelopeByID(String token, Long envelopeID) {
        checkOwnership(token, envelopeID);
        return envelopeMapper.envelopeToEnvelopeDTO(
                envelopeRepository.findById(envelopeID).get());
    }

    @Override
    public EnvelopeDTO updateEnvelopeByID(String token, Long envelopeID, EnvelopeDTO envelopeDTO) {
        checkOwnership(token, envelopeID);
        checkDTO(envelopeDTO);

        Envelope envelope = envelopeRepository.findById(envelopeID).get();
        envelopeMapper.updateEnvelope(envelopeDTO, envelope);
        return envelopeMapper.envelopeToEnvelopeDTO(
                envelopeRepository.save(envelope)
        );
    }

    @Override
    public void deleteEnvelopeByID(String token, Long envelopeID) {
        checkOwnership(token, envelopeID);
        envelopeRepository.deleteById(envelopeID);
    }

    private void checkOwnership(String token, Long envelopeID) {
        Account account = accountService.getAccountEntityFromToken(token);
        Envelope envelope = envelopeRepository.findById(envelopeID).orElseThrow(() -> new IllegalArgumentException("Envelope not found"));
        if(!envelope.getAccount().getAccountID().equals(account.getAccountID())){
            throw new IllegalArgumentException("You are not the owner of this envelope");
        }
    }

    private void checkDTO(EnvelopeDTO envelopeDTO){
        return;
    }
}
